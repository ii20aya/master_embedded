
u6l4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000019c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000968  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000569  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000162  00000000  00000000  00000f51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000327  00000000  00000000  000010b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  000013dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000122  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000129  00000000  00000000  000015d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_1>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_2>
   c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  8a:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EXTI_init>:
#define	PORTA *(volatile uint8_t*)(0x1B)
*/

void EXTI_init(void)
{  //INT0 & INT1 at "any logic change mode"
	MCUCR |=(1<<0)|(1<<2);
  92:	85 b7       	in	r24, 0x35	; 53
  94:	85 60       	ori	r24, 0x05	; 5
  96:	85 bf       	out	0x35, r24	; 53
	//INT2 at rising edge mode
	MCUCSR |=(1<<6);
  98:	84 b7       	in	r24, 0x34	; 52
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	84 bf       	out	0x34, r24	; 52
	// mask the 3 interrupts
	GICR |=(1<<7)|(1<<6)|(1<<5);
  9e:	8b b7       	in	r24, 0x3b	; 59
  a0:	80 6e       	ori	r24, 0xE0	; 224
  a2:	8b bf       	out	0x3b, r24	; 59
	// enable global interrupt
	//SREG |=(1<<7);
	sei();
  a4:	78 94       	sei
}
  a6:	08 95       	ret

000000a8 <GPIO_init>:
void GPIO_init(void)
{
	DDRD &=~(1<<2);
  a8:	8a 98       	cbi	0x11, 2	; 17
	DDRD &=~(1<<3);
  aa:	8b 98       	cbi	0x11, 3	; 17
	DDRB &=~(1<<2);
  ac:	ba 98       	cbi	0x17, 2	; 23
	
	
	PORTB |=(1<<2); //pull up
  ae:	c2 9a       	sbi	0x18, 2	; 24
	PORTD |=(1<<2); // pull up
  b0:	92 9a       	sbi	0x12, 2	; 18
	PORTD |=(1<<3); // pull up
  b2:	93 9a       	sbi	0x12, 3	; 18
	
	//leds out
	DDRA =0XFF;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8a bb       	out	0x1a, r24	; 26
	PORTA=0X00;
  b8:	1b ba       	out	0x1b, r1	; 27
}
  ba:	08 95       	ret

000000bc <main>:


int main(void)
{
	EXTI_init();
  bc:	0e 94 49 00 	call	0x92	; 0x92 <EXTI_init>
	GPIO_init();
  c0:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_init>
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x8>

000000c6 <__vector_1>:
	while (1);
	
	
}
ISR (INT0_vect)
{
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
	PORTA |=(1<<0);
  d8:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	8f e3       	ldi	r24, 0x3F	; 63
  dc:	9d e0       	ldi	r25, 0x0D	; 13
  de:	a3 e0       	ldi	r26, 0x03	; 3
  e0:	81 50       	subi	r24, 0x01	; 1
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	a0 40       	sbci	r26, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <__vector_1+0x1a>
  e8:	00 c0       	rjmp	.+0      	; 0xea <__vector_1+0x24>
  ea:	00 00       	nop
	_delay_ms(1000);
	PORTA &= ~(1<<0);
  ec:	d8 98       	cbi	0x1b, 0	; 27
  ee:	a3 ec       	ldi	r26, 0xC3	; 195
  f0:	b9 e0       	ldi	r27, 0x09	; 9
  f2:	11 97       	sbiw	r26, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <__vector_1+0x2c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <__vector_1+0x32>
  f8:	00 00       	nop
	_delay_ms(10);
}
  fa:	bf 91       	pop	r27
  fc:	af 91       	pop	r26
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <__vector_2>:

ISR(INT1_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	af 93       	push	r26
 11c:	bf 93       	push	r27
	PORTA |=(1<<1);
 11e:	d9 9a       	sbi	0x1b, 1	; 27
 120:	8f e3       	ldi	r24, 0x3F	; 63
 122:	9d e0       	ldi	r25, 0x0D	; 13
 124:	a3 e0       	ldi	r26, 0x03	; 3
 126:	81 50       	subi	r24, 0x01	; 1
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	a0 40       	sbci	r26, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <__vector_2+0x1a>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <__vector_2+0x24>
 130:	00 00       	nop
	_delay_ms(1000);
	PORTA &= ~(1<<1);
 132:	d9 98       	cbi	0x1b, 1	; 27
 134:	a3 ec       	ldi	r26, 0xC3	; 195
 136:	b9 e0       	ldi	r27, 0x09	; 9
 138:	11 97       	sbiw	r26, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <__vector_2+0x2c>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <__vector_2+0x32>
 13e:	00 00       	nop
	_delay_ms(10);
}
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_3>:
ISR(INT2_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
	PORTA |=(1<<2);
 164:	da 9a       	sbi	0x1b, 2	; 27
 166:	8f e3       	ldi	r24, 0x3F	; 63
 168:	9d e0       	ldi	r25, 0x0D	; 13
 16a:	a3 e0       	ldi	r26, 0x03	; 3
 16c:	81 50       	subi	r24, 0x01	; 1
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	a0 40       	sbci	r26, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <__vector_3+0x1a>
 174:	00 c0       	rjmp	.+0      	; 0x176 <__vector_3+0x24>
 176:	00 00       	nop
	_delay_ms(1000);
	PORTA &= ~(1<<2);
 178:	da 98       	cbi	0x1b, 2	; 27
 17a:	a3 ec       	ldi	r26, 0xC3	; 195
 17c:	b9 e0       	ldi	r27, 0x09	; 9
 17e:	11 97       	sbiw	r26, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <__vector_3+0x2c>
 182:	00 c0       	rjmp	.+0      	; 0x184 <__vector_3+0x32>
 184:	00 00       	nop
	_delay_ms(10);
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
